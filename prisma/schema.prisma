generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    password      String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Movie {
    id               Int           @id
    type             MovieType
    name             String
    description      String
    shortDescription String?
    year             Int
    rating           Int
    votes            Int
    movieLength      Int?
    alternativeName  String?
    genres           String[]
    poster           Poster        @relation(fields: [posterId], references: [id])
    posterId         Int
    releaseYears     ReleaseYear[]
    externalId       ExternalId    @relation(fields: [externalIdId], references: [id])
    externalIdId     Int
}

model ExternalId {
    id    Int     @id @default(autoincrement())
    kpHD  String?
    imdb  String?
    tmdb  Int?
    Movie Movie[]
}

model ReleaseYear {
    id      Int    @id @default(autoincrement())
    start   Int
    end     Int
    Movie   Movie? @relation(fields: [movieId], references: [id])
    movieId Int?
}

model Poster {
    id         Int    @id @default(autoincrement())
    url        String
    previewUrl String

    Movie Movie[]
}

enum MovieType {
    movie
    cartoon
    tv_series
    animated_series
    anime
}
